// COMPATIBILITY
// Mixins and functions related to browser compatibility.

	// Clip Path
	@mixin clip-path ( $value ) {
		-webkit-clip-path: $value;
		clip-path: $value;
	}

// CLEAR

	@mixin clear-after {
		&::after {
			clear: both;
			display: block;
			content: '';
		}
	}

// FIRST & LAST MARGINS
// Specify that the first and last children of a containing element have no top or bottom margin, respectively. This is useful when the container already provides appropriate padding or margin around its contents.

	@mixin no-first-last-margins ( $first: 0, $last: 0 ) {
		& > *:first-child { margin-top:    $first; }
		& > *:last-child  { margin-bottom: $last;  }
	}

// LINK COLOR

	@mixin link-color($color, $hover: $color) {
		color: $color;
		&:active { color: $color; }
		&:visited { color: $color; }
		@if ( $hover != null ) {
			&:hover { color: $hover; }
		}
	}

	@mixin invisible-link() {
		@include link-color(inherit);
		text-decoration: inherit;
	}

// FLEXBOX SHORTCODES

	@mixin flex-layout ( $flex-direction: row, $flex-wrap: nowrap, $justify-content: flex-start, $align-items: stretch ) {
		@include display-flex;
		@include flex-direction( $flex-direction );
		@include flex-wrap( $flex-wrap );
		@include justify-content( $justify-content );
		@include align-items( $align-items );
	}

	@mixin flex-children ( $flex: 0 1 auto ) {
		& > * {
			@include flex( $flex );
		}
	}

	@mixin display-flex() {
		display: -webkit-box;
		display: -moz-box;
		display: -ms-flexbox;
		display: -webkit-flex;
		display: flex;
	}

	@mixin flex-direction($direction) {
		-webkit-flex-direction: $direction;
		-moz-flex-direction: $direction;
		-ms-flex-direction: $direction;
		flex-direction: $direction;
	}

	@mixin flex-wrap($wrap) {
		-webkit-flex-wrap: $wrap;
		-moz-flex-wrap: $wrap;
		-ms-flex-wrap: $wrap;
		flex-wrap: $wrap;
	}

	@mixin justify-content($justify) {
		-webkit-justify-content: $justify;
		-moz-justify-content: $justify;
		-ms-justify-content: $justify;
		justify-content: $justify;
		-ms-flex-pack: $justify;
	}

	@mixin align-items($align) {
		-webkit-align-items: $align;
		-moz-align-items: $align;
		-ms-align-items: $align;
		-ms-flex-align: $align;
		align-items: $align;
	}


// UNSTYLED LIST

	@mixin no-list-style {
		margin: 0;
		padding: 0;
		list-style: none;
	}

// ABSOLUTE CENTER

@mixin absolute-center {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

// ABSOLUTE OVERLAY

	@mixin absolute-cover {
		position: absolute;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
	}

// ZOOM ON HOVER

	@mixin hover-zoom( $scale: 1.05 ) {
		@include transform(scale(1));
		&:hover { @include transform(scale($scale)); }
		@include transition( transform .2s );
	}

// animation transitions
// i.e. @include trans(all 0.3s ease-in-out);
	@mixin trans($args...) {
	  -webkit-transition: $args;  
	  -moz-transition: $args;
	  -ms-transition: $args;
	  -o-transition: $args;
	  transition: $args;
	}

	@mixin transition($transition...) {
	    -moz-transition:    $transition;
	    -o-transition:      $transition;
	    -webkit-transition: $transition;
	    transition:         $transition;
	}

	@mixin transform($transforms) {
		-moz-transform: $transforms;
		-o-transform: $transforms;
		-ms-transform: $transforms;
		-webkit-transform: $transforms;
		transform: $transforms;
	}

// shadows 
// i.e. @include box-shadow(0px, -20px, 20px, -20px, rgba(#000000, .2), inset);
	@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
	    @if $inset {
	        -webkit-box-shadow:inset $top $left $blur $size $color;
	        -moz-box-shadow:inset $top $left $blur $size $color;
	        box-shadow:inset $top $left $blur $size $color;
	    } @else {
	        -webkit-box-shadow: $top $left $blur $size $color;
	        -moz-box-shadow: $top $left $blur $size $color;
	        box-shadow: $top $left $blur $size $color;
	    }
	}


